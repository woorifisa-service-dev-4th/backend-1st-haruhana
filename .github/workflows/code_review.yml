name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  code_review:
    runs-on: ubuntu-latest
    name: Gemini Code Review
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install @google/generative-ai parse-diff

      - name: Review Changed Files
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
          MAX_CONCURRENT_REVIEWS: 3 # 동시에 처리할 파일 수
          MAX_RETRIES: 3
          RETRY_DELAY: 1000

        with:
          script: |
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const parseDiff = require('parse-diff');
            // core는 이미 github-script에서 제공됨

            // 재시도 로직을 포함한 API 호출 함수
            async function withRetry(fn, retries = process.env.MAX_RETRIES) {
              for (let i = 0; i < retries; i++) {
                try {
                  return await fn();

                } catch (error) {
                  if (error.message.includes('rate limit') && i < retries - 1) {
                    const delay = process.env.RETRY_DELAY * Math.pow(2, i);
                    console.log(`Rate limit hit, waiting ${delay}ms before retry ${i + 1}`);

                    await new Promise(resolve => setTimeout(resolve, delay));
                    continue;
                  }

                  throw error;
                }
              }
            }

            // Gemini AI 클라이언트 초기화
            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL });

            /**
             * 코드 변경사항을 검토하고 피드백을 생성
             * 
             * @param content 리뷰할 코드 내용
             * @param filename 파일명
             * @returns 리뷰 코멘트
             */
            async function reviewCode(content, filename) {
              try {
                // 파일명 sanitize
                const sanitizedFilename = filename.replace(/[^a-zA-Z0-9.-_\/]/g, '_');

                const prompt = `당신은 시니어 개발자입니다. 아래 ${sanitizedFilename} 파일의 코드를 검토하고 다음 사항들을 한국어로 리뷰해주세요:
                1. 코드의 품질과 가독성
                2. 잠재적인 버그나 문제점
                3. 성능 개선 포인트
                4. 보안 관련 이슈
                5. 개선을 위한 구체적인 제안

                코드:
                ${content}`;

                const result = await withRetry(() => model.generateContent(prompt));
                const response = await result.response;

                if (!response.text()) {
                  throw new Error('Gemini API returned empty response');
                }

                console.log(`Successfully reviewed ${filename}`);
                return response.text();

              } catch (error) {
                console.error(`Error reviewing ${filename}:`, error);
                return `⚠️ 코드 리뷰 중 오류가 발생했습니다: ${error.message}
                       다시 시도하시거나 관리자에게 문의해주세요.`;
              }
            }

            /**
             * PR의 각 파일을 처리하고 리뷰 코멘트 작성
             * @param file PR에서 변경된 파일 정보
             * @param pr PR 정보
             */
            async function processFile(file, pr) {
              if (file.status === 'removed') {
                console.log(`Skipping removed file: ${file.filename}`);
                return;
              }

              try {
                if (!file.patch) {
                  console.warn(`No patch found for ${file.filename}, skipping.`);
                  return;
                }

                const diff = parseDiff(file.patch)[0];
                if (!diff || !diff.chunks) {
                  console.log(`No valid diff found for ${file.filename}`);
                  return;
                }

                // 모든 변경사항을 하나로 합치기 (추가된 부분만 필터링)
                const changes = diff.chunks
                  .flatMap(chunk => chunk.changes)
                  .filter(change => change.type === 'add');

                if (changes.length === 0) {
                  console.log(`No added changes found in ${file.filename}`);
                  return;
                }

                // 변경사항을 하나의 문자열로 합치기
                const content = changes.map(change => change.content).join('\n');
                const review = await reviewCode(content, file.filename);

                // PR에 리뷰 코멘트 작성 (파일명을 헤더로 추가)
                return github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `## ${file.filename} 리뷰\n\n${review}`
                });

              } catch (error) {
                console.error(`Error processing ${file.filename}:`, error);
                throw error;
              }
            }

            try {
              // PR 정보 조회
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });

              // 변경된 파일 목록 조회
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });

              console.log(`Starting review of ${files.length} files...`);

              // 모든 파일 처리 완료를 기다림
              const promises = [];
              const batchSize = parseInt(process.env.MAX_CONCURRENT_REVIEWS);
            
              for (let i = 0; i < files.length; i += batchSize) {
                const batch = files.slice(i, i + batchSize);
                const batchPromises = batch.map(file => processFile(file, pr));
                promises.push(...batchPromises);
              }

              await Promise.all(promises);
              console.log('All reviews completed successfully');

            } catch (error) {
              console.error('Workflow failed:', error);
              core.setFailed(`Workflow failed: ${error.message}`);
            }
